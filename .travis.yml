language: node_js
services: docker
node_js: 6.10
env:
  global:
  - AWS_ACCESS_KEY_ID=AKIAI3Q22TSTMAYK6AFQ
  - AWS_DEFAULT_REGION=ap-southeast-2
  # AWS_SECRET_ACCESS_KEY
  - secure: nhK1C8Rsee423rEW5ELZrqaL+thfBnuOJiopnbof2ofA1sKYXVK8JKB/goVRxewGdacRux7hlbLr14oczjRuc+wJ+K4PmnRlX/jWsV8lQXnOCpFYSR1I1DGdvwchyOpY1AxiBbMTdodV4KdF5C9pCqfYDq0+4l265eog7MHCRbL/1jueaRBm2zk8gVLWajeS1jqmbkXFPcapN2/w4uKMQebyLyJ7McX2rcwAko3m1xHfo0osVvwx2vplwr1UhcGTlxuakDN4wLOSdGlHsRH9MrxewPOPfHltQJ9qutB2CVhKcK5mZ2piKjxlUXTyiOA6j3iVvnpyk+LPALEmM1CosWh3eyN+6v/HVUYmznoSNtibrIrXfYwcPMzlyhTlfDSTewFfYy1ImAE7BwC8z2EFomHY9B2d2otVCKRk9q5nzZ2CeKFLXHxWHkGLWO9o/sNL6eAAXDHLduaxmL7NWADSX/JUZt/BoevwX1HSnSvOOUOw48fvau4RUY6nzgRJlAS2eB2ajPrfFZV8yJjeXVwOC8zxvD5d3xfDnjBHTXK6OikTmcLEZ6sfuP2pC41jKW9os+xzuPiQ4z0z+My8MdV6K4Orpn9d2qgIxmnyhcw+s9QYUxlUaZmmM/W0CY8h+exG7SeewI2qXxxYpwyaeOOZZK67PS+KozX8H11PFoZLShs=
  # SLACK_HOOK_PROD
  - secure: tb3QkEo5F1ngaZvkdf4AJZy8rntrP+3BJmKBLMPLWNXuY23ZgZrwW9VW7pf6QLA4weHzXaCDLg4xhQixgZDVJ2HXe9t0WY+W777fM5Y8vV+T4aOAwhC0Q9AgU9p0KZo72k6r/JCSwvMmaw9ugFkk6972AngfVnKZXt4NUFYR22GfK2F6kzvpb1JOPlHS+mTHA+K2moxS3BlrViRwoFnq5MoCR8XKM9Lix6cqeBhWaLE0FEnmH+Hw4Kh4ppJzfHdLqs74Hw75dxLujYbnQORNXZ+qGk6vVWc3FNJ1pdaPFBKYzVPu/cmpRXY7zIi0NXhH92cwGS1eY3Q06CC6h6PZJ2bqB33COdtaomEUr3GP6ywRfB82/zeRYHEaZYRIt2de+EKSPrCPeTjbmkNjV4GQV+YvQfqWMgo/oMvTCBfWhQdf+h3lt77vfncbMumAnvZc/aVuBHUGIRnI6kfbgQY4IBmWIvyE+wdqA5JTB0jRinZrxAcWBqcFu13G3IhEgNnMmEzj0/AP4KmBVQSw/9kJS4ZvYtwsxhHMOp03GLAlCC+bqB5bw4Bz84zqi1NfMrSnAyzpfehLIHFbUjdPR68nnTRCi3Pmm9BFvpzWhnhm6omfQXQ2vOjvTHVj8bV/kl9sXhUUO36PumpsmUp5qaQNmbQpXp+OsZru2NSttIMF65Q=
  # SLACK_HOOK_DEV
  - secure: gvuhHTBp8KH5ENQbfL/5uIrJJ+WNNYQtb8LFWOh+xRLFF89OxRmxW7Uga4oSvv53QF0DMP1NCb7wkx9szlQqHqKE9pEd2I22p9n6KRS9FNyfqZzhyrZeVgCrU6/n2k/Y0dy9JQdB5BufymP1+7JWsa94EHeQOghUaUHEF2BPAMRUWoPZyb3NNB41a0oWTHa/h+5tefkng8n+NO/mSkr3BorNZ+EUNxFkGaD7YLrLBJlKBb/ie3jKp5AX46A3TbdyDT3o+nguYZ0yIn3n9V/Bv8ZB6tfbLzCIBwMLxhO+PGVmNZzJiB6eiv6bLszsYQSEv1Vowdcjf7mQN/SrOk7VRFfFgf69ouK/9s7HNio768/lK9P6FuJQW/MxslhhVWTUIY2L0cwiy3kBZtYY1CVJYdtSPFg1bIEna5V6d8k7TZFcijHppGF3joTWCPTMYbaGwPWMbp15he5LWGZOiSZcNiPRe26TOc0yrTNFpXwrE5ATyrF0PJ1p4W3BoiQmXn6530JuK2JGXEHw3dSn+Q79+YSK6Lz1/UPePEn6dL/iNJqz0Uwm53xVb/w5Ai+dQ+r1VG+atw6TBb6LcN+rH6dZa7NdVOnBCUMTBb/eY9oFkI4otP+AiSH2AGLJC6Q56iBGGC12B0zy9TqcmjbAlt+zD9nRSI3cIZPMnek75tSOR9I=
cache:
  yarn: true
  directories:
  - node_modules
install:
- yarn
- curl --location https://releases.hashicorp.com/terraform/0.11.7/terraform_0.11.7_linux_amd64.zip
  > terraform.zip
- unzip terraform.zip
- terraform() { "${TRAVIS_BUILD_DIR}/terraform" "$@"; }
script:
- export TF_VAR_slack_hook_dev="${SLACK_HOOK_DEV}"
- export TF_VAR_slack_hook_prod="${SLACK_HOOK_PROD}"
- terraform fmt -check infrastructure/
- "( cd infrastructure && terraform init -input=false -lock=false )"
- "( cd infrastructure && terraform validate )"
- "( cd infrastructure && terraform plan -detailed-exitcode -lock=false > /dev/null
  )"
- export LAMBDA_NAME="$( cd infrastructure && terraform output function_name )"
- export LAMBDA_DESCRIPTION="$( cd infrastructure && terraform output function_description
  )"
- export LAMBDA_TIMEOUT="$( cd infrastructure && terraform output function_timeout
  )"
- export LAMBDA_ROLE="$( cd infrastructure && terraform output function_role )"
- export LAMBDA_ALIAS="$( cd infrastructure && terraform output function_alias )"
- export LAMBDA_RUNTIME="$( cd infrastructure && terraform output function_runtime
  )"
- export SNS_TOPIC_DEV="$( cd infrastructure && terraform output sns_topic_dev )"
- TF_OUTPUT_HANDLER="$( cd infrastructure && terraform output function_handler )"
- IFS=. read LAMBDA_MODULE LAMBDA_HANDLER <<< "${TF_OUTPUT_HANDLER##*-}"
- export LAMBDA_MODULE && export LAMBDA_HANDLER
- yarn lint
- yarn test
before_deploy:
- rm -rf coverage infrastructure node_modules tests .*rc.js
- yarn --prod
deploy:
- true:
    branch: dev
  publish: false
  provider: lambda
  function_name: "$LAMBDA_NAME"
  region: "$AWS_DEFAULT_REGION"
  role: "$LAMBDA_ROLE"
  description: "$LAMBDA_DESCRIPTION"
  runtime: "$LAMBDA_RUNTIME"
  timeout: "$LAMBDA_TIMEOUT"
  module_name: "$LAMBDA_MODULE"
  handler_name: "$LAMBDA_HANDLER"
  access_key_id: "$AWS_ACCESS_KEY_ID"
  secret_access_key: "$AWS_SECRET_ACCESS_KEY"
  skip_cleanup: true
- true:
    branch: master
  publish: true
  provider: lambda
  function_name: "$LAMBDA_NAME"
  region: "$AWS_DEFAULT_REGION"
  role: "$LAMBDA_ROLE"
  description: "$LAMBDA_DESCRIPTION"
  runtime: "$LAMBDA_RUNTIME"
  timeout: "$LAMBDA_TIMEOUT"
  module_name: "$LAMBDA_MODULE"
  handler_name: "$LAMBDA_HANDLER"
  access_key_id: "$AWS_ACCESS_KEY_ID"
  secret_access_key: "$AWS_SECRET_ACCESS_KEY"
after_deploy:
- if [ "master" = "${TRAVIS_BRANCH}" ]; then pip install awscli --upgrade --user;
  export MOST_RECENT=$(aws lambda list-versions-by-function --function "${LAMBDA_NAME}"
  --max-items 10000 | node -e "let stdin=''; process.stdin.on('data',(chunk)=>{stdin+=chunk}).on('end',()=>{console.log(JSON.parse(stdin).Versions.pop().Version)})");
  aws lambda update-alias --function-name "${LAMBDA_NAME}" --name "${LAMBDA_ALIAS}"
  --function-version "${MOST_RECENT}"; fi;
